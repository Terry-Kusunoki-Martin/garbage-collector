type token =
  | NUM of (int)
  | ID of (string)
  | SETFST
  | SETSND
  | BEGIN
  | END
  | LBRACK
  | RBRACK
  | DEF
  | FST
  | SND
  | ADD1
  | SUB1
  | LPAREN
  | RPAREN
  | LET
  | IN
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | TRUE
  | FALSE
  | ISBOOL
  | ISPAIR
  | ISNUM
  | LAMBDA
  | EQEQ
  | LESS
  | GREATER
  | PRINT
  | SEMI
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Expr

# 46 "parser.ml"
let yytransl_const = [|
  259 (* SETFST *);
  260 (* SETSND *);
  261 (* BEGIN *);
  262 (* END *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* DEF *);
  266 (* FST *);
  267 (* SND *);
  268 (* ADD1 *);
  269 (* SUB1 *);
  270 (* LPAREN *);
  271 (* RPAREN *);
  272 (* LET *);
  273 (* IN *);
  274 (* EQUAL *);
  275 (* COMMA *);
  276 (* PLUS *);
  277 (* MINUS *);
  278 (* TIMES *);
  279 (* IF *);
  280 (* COLON *);
  281 (* ELSECOLON *);
  282 (* TRUE *);
  283 (* FALSE *);
  284 (* ISBOOL *);
  285 (* ISPAIR *);
  286 (* ISNUM *);
  287 (* LAMBDA *);
  288 (* EQEQ *);
  289 (* LESS *);
  290 (* GREATER *);
  291 (* PRINT *);
  292 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\005\000\005\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\006\000\006\000\006\000\
\010\000\010\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\005\000\001\000\
\003\000\001\000\003\000\004\000\006\000\005\000\004\000\003\000\
\006\000\005\000\003\000\003\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\004\000\006\000\001\000\
\002\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\030\000\012\000\013\000\000\000\010\000\
\011\000\004\000\005\000\000\000\000\000\000\000\002\000\003\000\
\007\000\009\000\008\000\006\000\044\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\020\000\000\000\000\000\023\000\017\000\026\000\000\000\
\022\000\000\000\000\000\000\000\019\000\025\000\015\000\039\000\
\021\000"

let yydgoto = "\002\000\
\021\000\022\000\023\000\024\000\033\000\028\000\049\000\059\000\
\026\000\029\000\027\000"

let yysindex = "\006\000\
\156\255\000\000\000\000\000\000\000\000\000\000\156\255\000\000\
\000\000\000\000\000\000\082\255\006\255\156\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\254\254\254\
\014\000\004\255\239\254\240\254\013\255\000\255\247\254\005\255\
\014\255\008\255\156\255\156\255\000\000\121\255\191\255\191\255\
\191\255\191\255\191\255\191\255\156\255\000\000\003\255\156\255\
\009\255\000\000\156\255\156\255\156\255\156\255\021\255\019\255\
\000\000\020\255\025\255\004\255\004\255\004\255\004\255\004\255\
\004\255\000\000\040\255\028\255\156\255\029\255\026\255\000\000\
\023\255\000\000\156\255\156\255\000\000\000\000\000\000\031\255\
\000\000\006\255\156\255\034\255\000\000\000\000\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\255\000\000\032\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\255\000\000\021\000\041\000\061\000\081\000\101\000\
\121\000\000\000\000\000\000\000\000\000\000\000\038\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\232\255\255\255\248\255\240\255\
\242\255\017\000\000\000"

let yytablesize = 433
let yytable = "\025\000\
\037\000\047\000\039\000\040\000\041\000\050\000\001\000\032\000\
\035\000\051\000\031\000\036\000\034\000\037\000\042\000\043\000\
\044\000\038\000\046\000\045\000\031\000\067\000\052\000\048\000\
\060\000\061\000\062\000\063\000\064\000\065\000\053\000\054\000\
\069\000\055\000\056\000\074\000\058\000\075\000\076\000\077\000\
\032\000\047\000\079\000\081\000\082\000\086\000\068\000\083\000\
\089\000\070\000\071\000\072\000\073\000\041\000\014\000\016\000\
\018\000\087\000\078\000\085\000\033\000\066\000\000\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\000\000\000\000\
\000\000\084\000\058\000\000\000\000\000\000\000\000\000\000\000\
\034\000\088\000\003\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\000\000\008\000\009\000\010\000\011\000\012\000\
\000\000\013\000\000\000\000\000\035\000\000\000\000\000\000\000\
\014\000\000\000\000\000\015\000\016\000\017\000\018\000\019\000\
\030\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\036\000\003\000\004\000\005\000\006\000\007\000\000\000\000\000\
\000\000\000\000\008\000\009\000\010\000\011\000\012\000\057\000\
\013\000\000\000\000\000\000\000\040\000\000\000\000\000\014\000\
\000\000\000\000\015\000\016\000\017\000\018\000\019\000\000\000\
\000\000\000\000\000\000\020\000\003\000\004\000\005\000\006\000\
\007\000\000\000\000\000\000\000\000\000\008\000\009\000\010\000\
\011\000\012\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\015\000\016\000\017\000\
\018\000\019\000\000\000\000\000\000\000\000\000\020\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\008\000\009\000\010\000\011\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\016\000\017\000\018\000\019\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\037\000\000\000\037\000\037\000\037\000\037\000\000\000\
\037\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\037\000\037\000\031\000\037\000\031\000\000\000\031\000\
\031\000\031\000\031\000\000\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\031\000\032\000\
\031\000\032\000\000\000\032\000\032\000\032\000\032\000\000\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\032\000\032\000\033\000\032\000\033\000\000\000\033\000\
\033\000\033\000\033\000\000\000\033\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\033\000\033\000\034\000\
\033\000\034\000\000\000\034\000\034\000\034\000\034\000\000\000\
\034\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\035\000\034\000\035\000\000\000\035\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\036\000\
\035\000\036\000\000\000\036\000\036\000\036\000\036\000\000\000\
\036\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\036\000\036\000\040\000\036\000\040\000\000\000\040\000\
\000\000\000\000\000\000\000\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000"

let yycheck = "\001\000\
\000\000\002\001\020\001\021\001\022\001\015\001\001\000\002\001\
\014\001\019\001\012\000\014\001\014\000\000\000\032\001\033\001\
\034\001\014\001\006\001\036\001\000\000\019\001\018\001\024\001\
\039\000\040\000\041\000\042\000\043\000\044\000\017\001\024\001\
\024\001\035\000\036\000\015\001\038\000\019\001\019\001\015\001\
\000\000\002\001\015\001\015\001\019\001\015\001\048\000\025\001\
\015\001\051\000\052\000\053\000\054\000\006\001\017\001\024\001\
\015\001\082\000\067\000\076\000\000\000\045\000\255\255\255\255\
\255\255\255\255\255\255\069\000\255\255\255\255\255\255\255\255\
\255\255\075\000\076\000\255\255\255\255\255\255\255\255\255\255\
\000\000\083\000\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\255\255\000\000\255\255\255\255\255\255\
\023\001\255\255\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\000\000\255\255\255\255\023\001\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\035\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\015\001\036\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\015\001\
\036\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\015\001\036\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\015\001\
\036\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\015\001\036\001\017\001\255\255\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\015\001\
\036\001\017\001\255\255\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\015\001\036\001\017\001\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001"

let yynames_const = "\
  SETFST\000\
  SETSND\000\
  BEGIN\000\
  END\000\
  LBRACK\000\
  RBRACK\000\
  DEF\000\
  FST\000\
  SND\000\
  ADD1\000\
  SUB1\000\
  LPAREN\000\
  RPAREN\000\
  LET\000\
  IN\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISPAIR\000\
  ISNUM\000\
  LAMBDA\000\
  EQEQ\000\
  LESS\000\
  GREATER\000\
  PRINT\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 21 "parser.mly"
        ( ENumber(_1) )
# 321 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "parser.mly"
         ( EBool(true) )
# 327 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 23 "parser.mly"
          ( EBool(false) )
# 333 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
         ( Add1 )
# 339 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
         ( Sub1 )
# 345 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
          ( Print )
# 351 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
           ( IsBool )
# 357 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 30 "parser.mly"
          ( IsNum )
# 363 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
           ( IsPair )
# 369 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
        ( Fst )
# 375 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
        ( Snd )
# 381 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
           ( SetFst )
# 387 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
           ( SetSnd )
# 393 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                  ( [(_1, _3)] )
# 401 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 41 "parser.mly"
                              ( (_1, _3)::_5 )
# 410 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
       ( [_1] )
# 417 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 45 "parser.mly"
                 ( _1::_3 )
# 425 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
         ( [_1] )
# 432 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 49 "parser.mly"
                     ( _1::_3 )
# 440 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                             ( EPrim1(_1, _3) )
# 448 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'prim2) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                        ( EPrim2(_1, _3, _5) )
# 457 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                                  ( EPair(_2, _4) )
# 465 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 55 "parser.mly"
                                    ( EApp(_1, _3) )
# 473 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    Obj.repr(
# 56 "parser.mly"
                              ( EApp(_1, []) )
# 480 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ids) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                                        ( ELambda(_3, _5) )
# 488 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                                    ( ELambda([], _4) )
# 495 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                       ( _2 )
# 502 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'block_exprs) in
    Obj.repr(
# 60 "parser.mly"
                          ( ESeq(_2) )
# 509 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 61 "parser.mly"
          ( _1 )
# 516 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
       ( EId(_1) )
# 523 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 65 "parser.mly"
                                ( EPrim2(Plus, _1, _3) )
# 531 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 66 "parser.mly"
                                 ( EPrim2(Minus, _1, _3) )
# 539 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 67 "parser.mly"
                                 ( EPrim2(Times, _1, _3) )
# 547 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 68 "parser.mly"
                                ( EPrim2(Equal, _1, _3) )
# 555 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 69 "parser.mly"
                                ( EPrim2(Less, _1, _3) )
# 563 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 70 "parser.mly"
                                   ( EPrim2(Greater, _1, _3) )
# 571 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 71 "parser.mly"
                ( _1 )
# 578 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binds) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                      ( ELet(_2, _4) )
# 586 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                      ( EIf(_2, _4, _6) )
# 595 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 76 "parser.mly"
               ( _1 )
# 602 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
              ( [_1] )
# 609 "parser.ml"
               : 'block_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block_exprs) in
    Obj.repr(
# 80 "parser.mly"
                          ( _1::_3 )
# 617 "parser.ml"
               : 'block_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                   ( _1 )
# 624 "parser.ml"
               : Expr.expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
;;
# 85 "parser.mly"

# 651 "parser.ml"
